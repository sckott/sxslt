<?xml version="1.0"?>

<doc xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     xmlns:s="http://cm.bell-labs.com/stat/S4">

<title>XSL Nodesets &amp; Nodes in R</title>

In this example, we illustrate how one can access XML nodes from R
functions.  We want to have R generate univariate summaries for some
of the variables in a data frame.
We could of course specify each variable in an
S expression such as 
<verb>
 r:eval("summary('var1')")
</verb>
We can parameterize this 
<verb>
 r:call("Summary", string(@name))
</verb>
in an XSL rule such as
<verb>
<![CDATA[
 <xsl:template match="var">
   <xsl:value-of select='r:Summary(string(@name))' />
 </xsl:template>
]]>
</verb>

In many situations this will suffice.  But what if we want to provide
a more abstract, top-level description in the input document so that
it can be used in a variety of different output documents.  We might
want to change the way we compute summaries to provide a table of both
univariate means and pairwise correlations.  That would mean changing
the XSL rules. Those of us who are familiar with R can probably do
this more rapidly in R. We can write the function to produce the
summary for the different variables.  The S function takes in a list
of the variables that we want to process together and generates the
XML providing the results. It is hard in XSL to specify a variable
number of arguments to a call.  However, we pass one or more nodes to
a function very easily.  So we can use this to pass a top-level
description to an R function and have it perform the processing.

<p/>
Let's consider an example. We might represent our 
summary instruction as a top-level node
with sub-nodes that identify the variables
of interest.
<verb>
<![CDATA[
 <summary data="mtcars">
   <var name="mpg"/>
   <var name="cyl"/>
   <var name="gear"/>
 </summary>
]]>
</verb>
Now, to generate our summary, we 
call an XSL function which in turn calls R.
The XSL rule might be something like
<verb>
<![CDATA[
<xsl:template match="summary">
 <xsl:value-of select="r:Summary(.)"/>
</xsl:template>
]]>
</verb>

<p/> 

The <literal>.</literal> is the important point in the call.  This
passes the entire node set containing the single node
<xsl:element>summary</xsl:element>.  The S function can the operate on
this nodeset, accessing the node(s), its attributes and its children.
It can extract a list of the variables of interest and generate the
relevant output from these.

<p/>

Next, we'll take a look how to access these values in R.
Let's suppose the XSL call to <s:functionRef>Summary</s:functionRef>
is 
<verb>
 r:Summary(., true, 2)
</verb>

The 3 arguments are the collection of nodes for this rule, a logical
value indicating that we want both univariate and pairwise statistics,
and <literal>2</literal> is the number of decimal placs we want in the
output.
These are arguments to the S function
<verb>
<![CDATA[
 Summary <- 
 function(nodeSet, both = FALSE, digits = options("digits")) {
   ...
 }
]]>
</verb>

Now, the body of the function needs to determine the variables in the
<xsl:element>var</xsl:element> nodes.
First we extract the <xsl:attribute>data</xsl:attribute> attribute
from the top-level node.
<verb>
<![CDATA[
  dataName <- nodes[1]$attributes["data"]
]]>
</verb>
The nodes argument is a nodeset which contains
the <xsl:element>summary</xsl:element> node as its only element.
So we extract the first element as
<verb>
 nodes[1]
</verb>
Next we ask for its list of attributes and get the value of the
<literal>data</literal> element.  
We should note that the nodeset and
the attributes of the first node are not copies of the XSL objects but
references to the internal C level objects representing them.  This
makes them efficient and also potentially mutable. However, there are
no methods in this package to modify them. This is because they are
part of the input document, not the output being generated.  Hence
modifying them doesn't make that much sense (except under very
specific circumstances).

<p/>

The next step is to find the variables of interest in the
<xsl:element>summary</xsl:element> specification.  We can do this by
iterating over the sub-nodes of the top-level node and extracting the
<xsl:attribute>name</xsl:attribute> attribute of each element.
The following code does this. 
<verb>
  unlist(sapply(1:nodes[1]$length, 
                function(i) {
                     nodes[1]$children[[i]]$attributes["name"]
                }))
</verb>
The non-<xml:element>var</xml:element> elements will
have no attribute <xml:attribute>name</xml:attribute>
and result in a 0-length character vector.
Hence, in our example, this computation will give
the vector
<verb>
 c("mpg, "cyl", "gear")
</verb>

<summary data="mtcars">
   <var name="mpg" />
   <var name="cyl" />
   <var name="gear" />
</summary>

<p/>
<showData data="mtcars" />

<p/>

What we give up with this approach is the facility to format the
output in XSL.  This is the S function's responsibility. We can of
course change the XSL rule if we need this flexibility. What we do
gain is an ease of programming using the R language.  We also benefit
from doing the computations just once.  This is not an issue in our
example as the computations are almost immediate. However, for long
running simulations, we might want perform a single computation and
insert pieces of the results into different parts of the document.


</doc>
